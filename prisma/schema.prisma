generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  name       String
  role       Role     @default(STUDENT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student    Student?
  teacher    Teacher?
  parent     Parent?
  staff      Staff?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Student {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  grade      Int
  enrollments Enrollment[]
  attendances Attendance[]
  submissions Submission[]
  fees        Fee[]
  results     Result[]
}

model Teacher {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  courses    Course[]
  notes      Note[]
}

model Parent {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  students   Student[]
}

model Staff {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  position   String
  department String
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  events      Event[]
  assignments Assignment[]
  exams       Exam[]
  tests       Test[]
  notes       Note[]
}

model Enrollment {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  courseId   String
  course     Course   @relation(fields: [courseId], references: [id])
  enrolledAt DateTime @default(now())
}

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  date       DateTime
  status     AttendanceStatus
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  courseId    String?
  course      Course?  @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt DateTime @default(now())
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Submission[]
}

model Submission {
  id           String   @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id])
  fileUrl      String
  submittedAt  DateTime @default(now())
  grade        Grade?
}

model Grade {
  id           String   @id @default(cuid())
  submissionId String   @unique
  submission   Submission @relation(fields: [submissionId], references: [id])
  value        Float
  feedback     String?
  gradedAt     DateTime @default(now())
}

model Fee {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  dueDate     DateTime
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  feeId       String
  fee         Fee      @relation(fields: [feeId], references: [id])
  createdAt   DateTime @default(now())
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  results     Result[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Test {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  duration    Int
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  results     Result[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Result {
  id         String   @id @default(cuid())
  score      Float
  feedback   String?
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  examId     String?
  exam       Exam?    @relation(fields: [examId], references: [id])
  testId     String?
  test       Test?    @relation(fields: [testId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
  teacherId   String
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  STAFF
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
